# -*- mode: ruby -*-
# vi: set ft=ruby :

require "rbconfig"
IS_WINDOWS = (RbConfig::CONFIG["host_os"] =~ /mswin|mingw|cygwin/) ? true : false

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise32"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  # This can be set to the host name you wish the guest machine to have.
  config.vm.hostname = "computeqi-dev-box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine.
  config.vm.network :forwarded_port, guest: 3000, host: 3000, auto_correct: true    # ruby
  config.vm.network :forwarded_port, guest: 27017, host: 27017, auto_correct: true  # mongodb
  config.vm.network :forwarded_port, guest: 8080, host: 8080, auto_correct: true    # tomcat

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../src", "/home/vagrant/src", :nfs => !IS_WINDOWS
  config.vm.synced_folder "../src/webapps", "/var/lib/tomcat6/webapps", :nfs => !IS_WINDOWS

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    # vb.gui = true
  
    # Use VBoxManage to customize the VM. For example, to change memory and 
    # allow symlinks to be created in the shared folder:
    vb.customize ["modifyvm", :id, "--memory", "1024"]
    vb.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/src", "1"]
  end
  # View the documentation for the provider you're using for more
  # information on available options.

  # Requires vagrant-vbguest plugin
  #
  # set auto_update to false, if you do NOT want to check the correct  
  # VirtualBox guest additions version when booting this machine
  # config.vbguest.auto_update = false
  
  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles. 
  config.vm.provision :chef_solo do |chef|
    chef.add_recipe "apt"
    chef.add_recipe "nodejs"
    chef.add_recipe "ruby_build"
    chef.add_recipe "rbenv::system"
    chef.add_recipe "rbenv::vagrant"
    chef.add_recipe "java"
    chef.add_recipe "openssl"
    chef.add_recipe "tomcat"
    chef.add_recipe "vim"
  
    # You may also specify custom JSON attributes:
    chef.json = {
      :nodejs => {
        :version => "0.10.12"
      }, 
      :rbenv => {
        :rubies => ["1.9.3-p448"],
        :global => "1.9.3-p448",
        :gems => {
          "1.9.3-p448" => [
            { :name => "rails",
              :version => "3.2.13"
            }
          ]
        }
      },
      :java => {
        :install_flavor => "oracle",
        :oracle => {
          :accept_oracle_download_terms => true
        }
      }
    }
  end

  # Enable provisioning with shell using a bash script
  config.vm.provision :shell, :path => "provision.sh"
end
